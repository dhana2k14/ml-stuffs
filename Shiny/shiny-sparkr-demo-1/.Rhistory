View(Json)
sapply(teleData[i], function(x) x$date)
nchar(sapply(teleData[i], function(x) x$date))
teleData <- cardata[['telemetry']]
Json <- data.frame(NULL)
tele <- data.frame(NULL)
for (i in c(1:length(teleData)))
{
AssetName <- sapply(teleData[i], function(x) x$assetName)
OwnerId <- sapply(teleData[i], function(x) x$ownerId)
OriginId <- sapply(teleData[i], function(x) x$originId)
Linked <- sapply(teleData[i], function(x) x$linked)
Date <- substr(sapply(teleData[i], function(x) x$date), 7, nchar(sapply(teleData[i], function(x) x$date))-2)
Received <- substr(sapply(teleData[i], function(x) x$received), 7, nchar(sapply(teleData[i], function(x) x$received))-2)
Active <- sapply(teleData[i], function(x) x$active)
locationData <- t(sapply(teleData[[i]][[8]], function(x) x[1]))
hdop <- sapply(teleData[[i]][[11]][[1]], function(x) x[[1]])
bussPrivate <- sapply(teleData[[i]][[11]][[2]], function(x) x[[1]])
power_voltage <- sapply(teleData[[i]][[11]][[3]], function(x) x[[1]])
battery_voltage <- sapply(teleData[[i]][[11]][[4]], function(x) x[[1]])
moving <- sapply(teleData[[i]][[11]][[5]], function(x) x[[1]])
roaming <- sapply(teleData[[i]][[11]][[6]], function(x) x[[1]])
engine <- sapply(teleData[[i]][[11]][[7]], function(x) x[[1]])
rsq <- sapply(teleData[[i]][[11]][[8]], function(x) x[[1]])
hours_00_counter <- sapply(teleData[[i]][[11]][[9]], function(x) x[[1]])
idle_Counter <- sapply(teleData[[i]][[11]][[10]], function(x) x[[1]])
Odometer <- sapply(teleData[[i]][[11]][[11]], function(x) x[[1]])
temp <- cbind(hdop, bussPrivate, power_voltage, battery_voltage, moving, roaming, engine, rsq, hours_00_counter, idle_Counter, Odometer)
data <- data.frame(AssetName, OwnerId, OriginId, Linked, Date, Received, Active, locationData, temp)
Json <-rbind(Json, data)
}
## Convert Json Date to DateTime format in R
Json$Date <- as.double(as.character(Json$Date))/1000
Json$Dt <- as.POSIXct(Json$Date, origin = "1970-01-01", tz = "")
Json$Dt
teleData <- cardata[['telemetry']]
Json <- data.frame(NULL)
tele <- data.frame(NULL)
for (i in c(1:length(teleData)))
{
AssetName <- sapply(teleData[i], function(x) x$assetName)
OwnerId <- sapply(teleData[i], function(x) x$ownerId)
OriginId <- sapply(teleData[i], function(x) x$originId)
Linked <- sapply(teleData[i], function(x) x$linked)
Date <- as.POSIXct(as.double(as.character(substr(sapply(teleData[i], function(x) x$date), 7, nchar(sapply(teleData[i], function(x) x$date))-2)))/1000, origin = "1970-01-01", tz = "")
Received <- substr(sapply(teleData[i], function(x) x$received), 7, nchar(sapply(teleData[i], function(x) x$received))-2)
Active <- sapply(teleData[i], function(x) x$active)
locationData <- t(sapply(teleData[[i]][[8]], function(x) x[1]))
hdop <- sapply(teleData[[i]][[11]][[1]], function(x) x[[1]])
bussPrivate <- sapply(teleData[[i]][[11]][[2]], function(x) x[[1]])
power_voltage <- sapply(teleData[[i]][[11]][[3]], function(x) x[[1]])
battery_voltage <- sapply(teleData[[i]][[11]][[4]], function(x) x[[1]])
moving <- sapply(teleData[[i]][[11]][[5]], function(x) x[[1]])
roaming <- sapply(teleData[[i]][[11]][[6]], function(x) x[[1]])
engine <- sapply(teleData[[i]][[11]][[7]], function(x) x[[1]])
rsq <- sapply(teleData[[i]][[11]][[8]], function(x) x[[1]])
hours_00_counter <- sapply(teleData[[i]][[11]][[9]], function(x) x[[1]])
idle_Counter <- sapply(teleData[[i]][[11]][[10]], function(x) x[[1]])
Odometer <- sapply(teleData[[i]][[11]][[11]], function(x) x[[1]])
temp <- cbind(hdop, bussPrivate, power_voltage, battery_voltage, moving, roaming, engine, rsq, hours_00_counter, idle_Counter, Odometer)
data <- data.frame(AssetName, OwnerId, OriginId, Linked, Date, Received, Active, locationData, temp)
Json <-rbind(Json, data)
}
View(Json)
teleData <- cardata[['telemetry']]
Json <- data.frame(NULL)
tele <- data.frame(NULL)
for (i in c(1:length(teleData)))
{
AssetName <- sapply(teleData[i], function(x) x$assetName)
OwnerId <- sapply(teleData[i], function(x) x$ownerId)
OriginId <- sapply(teleData[i], function(x) x$originId)
Linked <- sapply(teleData[i], function(x) x$linked)
Date <- as.POSIXct(as.double(as.character(substr(sapply(teleData[i], function(x) x$date), 7, nchar(sapply(teleData[i], function(x) x$date))-2)))/1000, origin = "1970-01-01", tz = "")
Received <- as.POSIXct(as.double(as.character(substr(sapply(teleData[i], function(x) x$received), 7, nchar(sapply(teleData[i], function(x) x$received))-2)))/1000, origin = "1970-01-01", tz = "")
Active <- sapply(teleData[i], function(x) x$active)
locationData <- t(sapply(teleData[[i]][[8]], function(x) x[1]))
hdop <- sapply(teleData[[i]][[11]][[1]], function(x) x[[1]])
bussPrivate <- sapply(teleData[[i]][[11]][[2]], function(x) x[[1]])
power_voltage <- sapply(teleData[[i]][[11]][[3]], function(x) x[[1]])
battery_voltage <- sapply(teleData[[i]][[11]][[4]], function(x) x[[1]])
moving <- sapply(teleData[[i]][[11]][[5]], function(x) x[[1]])
roaming <- sapply(teleData[[i]][[11]][[6]], function(x) x[[1]])
engine <- sapply(teleData[[i]][[11]][[7]], function(x) x[[1]])
rsq <- sapply(teleData[[i]][[11]][[8]], function(x) x[[1]])
hours_00_counter <- sapply(teleData[[i]][[11]][[9]], function(x) x[[1]])
idle_Counter <- sapply(teleData[[i]][[11]][[10]], function(x) x[[1]])
Odometer <- sapply(teleData[[i]][[11]][[11]], function(x) x[[1]])
temp <- cbind(hdop, bussPrivate, power_voltage, battery_voltage, moving, roaming, engine, rsq, hours_00_counter, idle_Counter, Odometer)
data <- data.frame(AssetName, OwnerId, OriginId, Linked, Date, Received, Active, locationData, temp)
Json <-rbind(Json, data)
}
View(Json)
hdop
bussPrivate
teleData[[i]][[11]][[2]]
sapply(teleData[[i]][[11]][[2]], function(x) x[[1]])
sapply(teleData[[i]][[11]][[3]], function(x) x[[1]])
cardata$telemetry
sapply(teleData[[i]][[11]][[11]], function(x) x[[1]])
sapply(teleData[[i]][[11]][2], function(x) x[[1]])
sapply(teleData[[i]][[11]][[[2]]], function(x) x[[1]])
sapply(teleData[[i]][[11]][[2]], function(x) x[[1]])
sapply(teleData[[i]][[11]][[2]][1], function(x) x[[1]])
sapply(teleData[[i]][[11]][[2]][2], function(x) x[[1]])
sapply(teleData[[i]][[11]][[2]], function(x) x[[1]])[1]
sapply(teleData[[i]][[11]][[2]], function(x) x[[1]])[2]
sapply(teleData[[i]][[11]][[2]], function(x) x[[1]])[0]
sapply(teleData[[i]][[11]][[2]], function(x) x[[1]])[1]
teleData <- cardata[['telemetry']]
Json <- data.frame(NULL)
tele <- data.frame(NULL)
for (i in c(1:length(teleData)))
{
AssetName <- sapply(teleData[i], function(x) x$assetName)
OwnerId <- sapply(teleData[i], function(x) x$ownerId)
OriginId <- sapply(teleData[i], function(x) x$originId)
Linked <- sapply(teleData[i], function(x) x$linked)
Date <- as.POSIXct(as.double(as.character(substr(sapply(teleData[i], function(x) x$date), 7, nchar(sapply(teleData[i], function(x) x$date))-2)))/1000, origin = "1970-01-01", tz = "")
Received <- as.POSIXct(as.double(as.character(substr(sapply(teleData[i], function(x) x$received), 7, nchar(sapply(teleData[i], function(x) x$received))-2)))/1000, origin = "1970-01-01", tz = "")
Active <- sapply(teleData[i], function(x) x$active)
locationData <- t(sapply(teleData[[i]][[8]], function(x) x[1]))
hdop <- sapply(teleData[[i]][[11]][[1]], function(x) x[[1]])
# bussPrivate <- sapply(teleData[[i]][[11]][[2]], function(x) x[[1]])
power_voltage <- sapply(teleData[[i]][[11]][[3]], function(x) x[[1]])
battery_voltage <- sapply(teleData[[i]][[11]][[4]], function(x) x[[1]])
moving <- sapply(teleData[[i]][[11]][[5]], function(x) x[[1]])
roaming <- sapply(teleData[[i]][[11]][[6]], function(x) x[[1]])
engine <- sapply(teleData[[i]][[11]][[7]], function(x) x[[1]])
rsq <- sapply(teleData[[i]][[11]][[8]], function(x) x[[1]])
hours_00_counter <- sapply(teleData[[i]][[11]][[9]], function(x) x[[1]])
idle_Counter <- sapply(teleData[[i]][[11]][[10]], function(x) x[[1]])
Odometer <- sapply(teleData[[i]][[11]][[11]], function(x) x[[1]])
temp <- cbind(hdop, power_voltage, battery_voltage, moving, roaming, engine, rsq, hours_00_counter, idle_Counter, Odometer)
data <- data.frame(AssetName, OwnerId, OriginId, Linked, Date, Received, Active, locationData, temp)
Json <-rbind(Json, data)
}
View(Json)
teleData <- cardata[['telemetry']]
Json <- data.frame(NULL)
tele <- data.frame(NULL)
for (i in c(1:length(teleData)))
{
AssetName <- sapply(teleData[i], function(x) x$assetName)
OwnerId <- sapply(teleData[i], function(x) x$ownerId)
OriginId <- sapply(teleData[i], function(x) x$originId)
Linked <- sapply(teleData[i], function(x) x$linked)
Date <- as.POSIXct(as.double(as.character(substr(sapply(teleData[i], function(x) x$date), 7, nchar(sapply(teleData[i], function(x) x$date))-2)))/1000, origin = "1970-01-01", tz = "")
Received <- as.POSIXct(as.double(as.character(substr(sapply(teleData[i], function(x) x$received), 7, nchar(sapply(teleData[i], function(x) x$received))-2)))/1000, origin = "1970-01-01", tz = "")
Active <- sapply(teleData[i], function(x) x$active)
locationData <- t(sapply(teleData[[i]][[8]], function(x) x[1]))
hdop <- sapply(teleData[[i]][[11]][[1]], function(x) x[[1]])
bussPrivate <- sapply(teleData[[i]][[11]][[2]], function(x) x[[1]])
power_voltage <- sapply(teleData[[i]][[11]][[3]], function(x) x[[1]])
battery_voltage <- sapply(teleData[[i]][[11]][[4]], function(x) x[[1]])
moving <- sapply(teleData[[i]][[11]][[5]], function(x) x[[1]])
roaming <- sapply(teleData[[i]][[11]][[6]], function(x) x[[1]])
engine <- sapply(teleData[[i]][[11]][[7]], function(x) x[[1]])
rsq <- sapply(teleData[[i]][[11]][[8]], function(x) x[[1]])
hours_00_counter <- sapply(teleData[[i]][[11]][[9]], function(x) x[[1]])
idle_Counter <- sapply(teleData[[i]][[11]][[10]], function(x) x[[1]])
Odometer <- sapply(teleData[[i]][[11]][[11]], function(x) x[[1]])
temp <- cbind(hdop, bussPrivate, power_voltage, battery_voltage, moving, roaming, engine, rsq, hours_00_counter, idle_Counter, Odometer)
data <- data.frame(AssetName, OwnerId, OriginId, Linked, Date, Received, Active, locationData, temp)
Json <-rbind(Json, data)
}
write.csv(Json, ".\JsonData_HexInnov2.csv", row.names = FALSE)
write.csv(Json, ".\\JsonData_HexInnov2.csv", row.names = FALSE)
url <- "export.kt01.net:11011"
js <- fromJSON(url)
?"source"
source("D:\\IoT\\Car Search\\EdmundsAPI.R")
Countries <- c("India", "Australia", "WestIndies", "SriLanka", "SouthAfrica")
library(ggplot2)
ICCT20 <- c("India", "Australia", "WestIndies", "SriLanka", "SouthAfrica")
Countries <- geocode(ICCT20)
install.packages("ggmaps")
library(ggmaps)
install.packages("ggmaps")
install.packages("D:/Softwares/ggmap_2.6.1.zip", repos = NULL, type = "win.binary")
library(ggmaps)
library(ggmap)
Countries <- geocode(ICCT20)
Countries$long
Countries$lon
nation.y <- Countries$lat
nation.x <- Countries$lon
world_map <- borders("world", colour = "grey", fill = "lightblue")
ggplot() + world_map + geom_point(aes(x = nation.x, y = nation.y), color  = "red", size = 3)
ggplot() + world_map + geom_point(aes(x = nation.x, y = nation.y), data = countries, color  = "red", size = 3)
ggplot() + world_map + geom_point(aes(x = nation.x, y = nation.y), data = Countries, color  = "red", size = 3)
world_map = qmap("world", zoom = 2)
world_map
world_map + geom_point(aes(x = nation.x, y = nation.y), data = Countries, color  = "red", size = 3)
install.packages("tabplot")
library(tabplot)
temp <- read.csv("D:\\Json\\JsonData_HexInnov2.csv")
head(temp)
tableplot(temp)
tableplot(temp[,c(1,7,9,10])
tableplot(temp[,c(1,7,9,10)])
bson
library(rmongodb)
#mongo <- mongo.create()
mongo <- mongo.create(host="172.25.146.81:27017",db="database")
mongo.is.connected(mongo)
mongo.get.databases(mongo)
mongo.get.database.collections(mongo,"test")
bson <- mongo.findOne(mongo, "test.test_collection")
library(rmongodb)
mongo <- mongo.create(host="172.25.146.81:27017",db="database")
install.packages("taskschduleR")
install.packages("taskscheduleR")
install.packages("taskscheduleR")
## Open weather maps
# setwd("D:\\R Practice scripts\\OpenWeatherData")
weatherRepo <- readRDS("D:\\R Practice scripts\\OpenWeatherData\\WeatherRepo.rds")
library(RJSONIO)
library(lubridate)
url <- "http://api.openweathermap.org/data/2.5/weather?lat=12.83606&lon=80.20362&appid=b1b15e88fa797225412429c1c50c122a"
json <- fromJSON(url)
t <- data.frame(cbind(
lon = json$coord[[1]],
lat = json$coord[[2]],
id = json$weather[[1]]$id[[1]],
main = json$weather[[1]]$main[[1]],
description = json$weather[[1]]$description[[1]],
icon = json$weather[[1]]$icon[[1]],
base = json$base[[1]],
temp = json$main[[1]],
pressure = json$main[[2]],
humidity = json$main[[3]],
temp_min = json$main[[4]],
temp_max = json$main[[5]],
# json$visibility,
wind_speed = json$wind[[1]],
wind_deg = json$wind[[2]],
clouds = json$clouds[[1]],
dt = json$dt[[1]],
sys_type = json$sys[[1]],
sys_id = json$sys[[2]],
sys_msg = json$sys[[3]],
sys_country = json$sys[[4]],
id1 = json$id[[1]],
name = json$name[[1]],
cod = json$cod[[1]],
sunrise = as.POSIXct(json$sys[[5]],origin = "1970-01-01", tz = ""),
sunset = as.POSIXct(json$sys[[6]],origin = "1970-01-01", tz = "")))
weatherRepo1 <- rbind(weatherRepo, t)
saveRDS(weatherRepo1, "D:\\R Practice scripts\\OpenWeatherData\\WeatherRepo.rds")
# Export
write.csv(weatherRepo1, "D:\\R Practice scripts\\OpenWeatherData\\OpenWeatherData.csv", row.names = FALSE)
weatherRepo <- readRDS("D:\\R Practice scripts\\OpenWeatherData\\WeatherRepo.rds")
?readRDS
weatherRepo <- readRDS("D:\\R Practice scripts\\OpenWeatherData\\WeatherRepo")
## Open weather maps
# setwd("D:\\R Practice scripts\\OpenWeatherData")
weatherRepo <- readRDS("D:\\R Practice scripts\\OpenWeatherData\\WeatherRepo.rds")
library(RJSONIO)
library(lubridate)
url <- "http://api.openweathermap.org/data/2.5/weather?lat=12.83606&lon=80.20362&appid=b1b15e88fa797225412429c1c50c122a"
json <- fromJSON(url)
t <- data.frame(cbind(
lon = json$coord[[1]],
lat = json$coord[[2]],
id = json$weather[[1]]$id[[1]],
main = json$weather[[1]]$main[[1]],
description = json$weather[[1]]$description[[1]],
icon = json$weather[[1]]$icon[[1]],
base = json$base[[1]],
temp = json$main[[1]],
pressure = json$main[[2]],
humidity = json$main[[3]],
temp_min = json$main[[4]],
temp_max = json$main[[5]],
# json$visibility,
wind_speed = json$wind[[1]],
wind_deg = json$wind[[2]],
clouds = json$clouds[[1]],
dt = json$dt[[1]],
sys_type = json$sys[[1]],
sys_id = json$sys[[2]],
sys_msg = json$sys[[3]],
sys_country = json$sys[[4]],
id1 = json$id[[1]],
name = json$name[[1]],
cod = json$cod[[1]],
sunrise = as.POSIXct(json$sys[[5]],origin = "1970-01-01", tz = ""),
sunset = as.POSIXct(json$sys[[6]],origin = "1970-01-01", tz = "")))
weatherRepo1 <- rbind(weatherRepo, t)
saveRDS(weatherRepo1, "D:\\R Practice scripts\\OpenWeatherData\\WeatherRepo.rds")
# Export
write.csv(weatherRepo1, "D:\\R Practice scripts\\OpenWeatherData\\OpenWeatherData.csv", row.names = FALSE)
weatherRepo <- readRDS(".\\WeatherRepo.rds")
## Open weather maps
# setwd("D:\\R Practice scripts\\OpenWeatherData")
weatherRepo <- readRDS("D:\\R_Practice_scripts\\OpenWeatherData\\WeatherRepo.rds")
library(RJSONIO)
library(lubridate)
url <- "http://api.openweathermap.org/data/2.5/weather?lat=12.83606&lon=80.20362&appid=b1b15e88fa797225412429c1c50c122a"
json <- fromJSON(url)
t <- data.frame(cbind(
lon = json$coord[[1]],
lat = json$coord[[2]],
id = json$weather[[1]]$id[[1]],
main = json$weather[[1]]$main[[1]],
description = json$weather[[1]]$description[[1]],
icon = json$weather[[1]]$icon[[1]],
base = json$base[[1]],
temp = json$main[[1]],
pressure = json$main[[2]],
humidity = json$main[[3]],
temp_min = json$main[[4]],
temp_max = json$main[[5]],
# json$visibility,
wind_speed = json$wind[[1]],
wind_deg = json$wind[[2]],
clouds = json$clouds[[1]],
dt = json$dt[[1]],
sys_type = json$sys[[1]],
sys_id = json$sys[[2]],
sys_msg = json$sys[[3]],
sys_country = json$sys[[4]],
id1 = json$id[[1]],
name = json$name[[1]],
cod = json$cod[[1]],
sunrise = as.POSIXct(json$sys[[5]],origin = "1970-01-01", tz = ""),
sunset = as.POSIXct(json$sys[[6]],origin = "1970-01-01", tz = "")))
weatherRepo1 <- rbind(weatherRepo, t)
saveRDS(weatherRepo1, "D:\\R_Practice_scripts\\OpenWeatherData\\WeatherRepo.rds")
# Export
write.csv(weatherRepo1, "D:\\R_Practice_scripts\\OpenWeatherData\\OpenWeatherData.csv", row.names = FALSE)
?rjson
install.packages("rjson")
install.packages("rjson")
install.packages("rjson")
install.packages("rjson")
install.packages("rjson")
install.packages("rjson")
install.packages("rjson")
library(rjson)
library(rjson)
library(rjson)
install.packages("rjson")
library(rjson)
url <- "http://api.openweathermap.org/data/2.5/weather?lat=12.83606&lon=80.20362&appid=b1b15e88fa797225412429c1c50c122a"
json <- fromJSON(file = url)
json
## Open weather maps
# setwd("D:\\R Practice scripts\\OpenWeatherData")
weatherRepo <- readRDS("D:\\R_Practice_scripts\\OpenWeatherData\\WeatherRepo.rds")
library(rjson)
library(lubridate)
url <- "http://api.openweathermap.org/data/2.5/weather?lat=12.83606&lon=80.20362&appid=b1b15e88fa797225412429c1c50c122a"
json <- fromJSON(file = url)
t <- data.frame(cbind(
lon = json$coord[[1]],
lat = json$coord[[2]],
id = json$weather[[1]]$id[[1]],
main = json$weather[[1]]$main[[1]],
description = json$weather[[1]]$description[[1]],
icon = json$weather[[1]]$icon[[1]],
base = json$base[[1]],
temp = json$main[[1]],
pressure = json$main[[2]],
humidity = json$main[[3]],
temp_min = json$main[[4]],
temp_max = json$main[[5]],
# json$visibility,
wind_speed = json$wind[[1]],
wind_deg = json$wind[[2]],
clouds = json$clouds[[1]],
dt = json$dt[[1]],
sys_type = json$sys[[1]],
sys_id = json$sys[[2]],
sys_msg = json$sys[[3]],
sys_country = json$sys[[4]],
id1 = json$id[[1]],
name = json$name[[1]],
cod = json$cod[[1]],
sunrise = as.POSIXct(json$sys[[5]],origin = "1970-01-01", tz = ""),
sunset = as.POSIXct(json$sys[[6]],origin = "1970-01-01", tz = "")))
weatherRepo1 <- rbind(weatherRepo, t)
saveRDS(weatherRepo1, "D:\\R_Practice_scripts\\OpenWeatherData\\WeatherRepo.rds")
# Export
write.csv(weatherRepo1, "D:\\R_Practice_scripts\\OpenWeatherData\\OpenWeatherData.csv", row.names = FALSE)
df <- read.table("D:\\Sample Data\\train.txt", sep = '\t')
![](C:\Users\33093\Desktop\Logo.png)
install.packages("quadprog")
install.packages("forecast")
install.packages("sparkR")
install.packages("SparkR")
shiny::runApp('D:/DynamicUI')
shiny::runApp('D:/DynamicUI')
## Running Spark in R Studio
## Setting up the system environment v
Sys.setenv(SPARK_HOME = "C:\Spark-1.4.1")
Sys.setenv(SPARK_HOME = "C:\\Spark-1.4.1")
.libPaths(c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib"),.libPaths()))
library(SparkR)
sc <- sparkR.init(master = 'local')
sqlContext <- sparkRSQL.init(sc)
df <- createDataFrame(sqlContext, faithful)
head(df)
nrow(df)
dim(df)
printSchema(df)
path <- file.path(Sys.getenv("SPARK_HOME"), "D:\\Json\\SampleJSON\\Telematics.json")
telematics <- jsonFile(sqlContext, path)
printSchema(telematics)
path <- file.path(Sys.getenv("SPARK_HOME"), "D:\Json\SampleJSON\Telematics.json")
path <- file.path(Sys.getenv("SPARK_HOME"), "D:/Json/SampleJSON/Telematics.json")
telematics <- jsonFile(sqlContext, path)
path <- file.path(Sys.getenv("SPARK_HOME"), "Telematics.json")
telematics <- jsonFile(sqlContext, path)
printSchema(telematics)
registerTempTable(telematics, "telemetry")
telematics
path
telematics <- jsonFile(sqlContext, path)
telematics
path <- file.path(Sys.getenv("SPARK_HOME"), "HondaCity_JSON3.json")
telematics <- jsonFile(sqlContext, path)
printSchema(telematics)
# Register this datafrme as table
registerTempTable(telematics, "telemetry")
telematics
path <- file.path(Sys.getenv("SPARK_HOME"), "C:\Spark-1.4.1\examples\src\main\resources\people.json")
path <- file.path(Sys.getenv("SPARK_HOME"), "examples\src\main\resources\people.json")
path <- file.path(Sys.getenv("SPARK_HOME"), "examples/src/main/resources/people.json")
telematics <- jsonFile(sqlContext, path)
printSchema(telematics)
telematics
registerTempTable(telematics, "telemetry")
telemetry
telematics
teenagers <- sql(sqlContext, "SELECT name FROM people WHERE age <= 13 AND age <= 19")
people <- jsonFile(sqlContext, path)
printSchema(people)
# Register this datafrme as table
registerTempTable(people, "telemetry")
peopleDF <- jsonFile(sqlContext, path)
printSchema(peopleDF)
# Register this datafrme as table
registerTempTable(peopleDF, "people")
teenagers <- sql(sqlContext, "SELECT name FROM people WHERE age <= 13 AND age <= 19")
teenagersLocalDF <- collect(teenagers)
teenagersLocalDF <- collect(teenagers)
path <- file.path(Sys.getenv("SPARK_HOME"), "examples/src/main/resources/people.json")
peopleDF <- jsonFile(sqlContext, path)
printSchema(peopleDF)
# Register this datafrme as table
registerTempTable(peopleDF, "people")
teenagers <- sql(sqlContext, "SELECT name FROM people WHERE age <= 13 AND age <= 19")
teenagersLocalDF <- collect(teenagers)
print(teenagersLocalDF)
path <- file.path(Sys.getenv("SPARK_HOME"), "Innova2.json")
telemetry <- jsonFile(sqlContext, path)
printSchema(telemetry)
# Register this datafrme as table
registerTempTable(telemetry, "tele")
teenagers <- sql(sqlContext, "SELECT tele FROM tele")
teenagersLocalDF <- collect(teenagers)
path
Sys.setenv(SPARK_HOME = "C:/Spark-1.4.1")
## set the library path
.libPaths(c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib"),.libPaths()))
# load SparkR library
library(SparkR)
# Create spark context and sql context
sc <- sparkR.init(master = 'local')
sqlContext <- sparkRSQL.init(sc)
# Create a sparkR DataFrame
path <- file.path(Sys.getenv("SPARK_HOME"), "Innova2.json")
path
telemetry <- jsonFile(sqlContext, path)
printSchema(telemetry)
registerTempTable(telemetry, "tele")
teenagers <- sql(sqlContext, "SELECT tele FROM tele")
teenagers <- sql(sqlContext, "SELECT * FROM tele")
teenagersLocalDF <- collect(teenagers)
path <- file.path(Sys.getenv("SPARK_HOME"), "Innova2.json")
telemetry <- jsonFile(sqlContext, path)
printSchema(telemetry)
# Register this datafrme as table
registerTempTable(telemetry, "tele")
teleLocal <- sql(sqlContext, "SELECT * FROM tele")
teleLocalDF <- collect(teleLocal)
Sys.setenv(SPARK_HOME = "C:/Spark-1.4.1")
## set the library path
.libPaths(c(file.path(Sys.getenv("SPARK_HOME"), "R", "lib"),.libPaths()))
# load SparkR library
library(SparkR)
# Create spark context and sql context
sc <- sparkR.init(master = 'local')
sqlContext <- sparkRSQL.init(sc)
path <- file.path(Sys.getenv("SPARK_HOME"), "Innova2.json")
telemetry <- jsonFile(sqlContext, path)
printSchema(telemetry)
# Register this datafrme as table
registerTempTable(telemetry, "tele")
teleLocal <- sql(sqlContext, "SELECT * FROM tele")
teleLocalDF <- collect(teleLocal)
sparkR.stop()
shiny::runApp('D:/Shiny/shiny-sparkr-demo-1')
shiny::runApp('D:/Shiny/shiny-sparkr-demo-1')
shiny::runApp('D:/Shiny/shiny-sparkr-demo-1')
setwd("D:\\Shiny\\shiny-sparkr-demo-1")
runApp()
sparkR.stop()
setwd("D:\\Shiny\\shiny-sparkr-demo-1")
runApp()
